using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Microsoft.UI.Xaml.Controls;
using Microsoft.Extensions.Logging;
using Microsoft.UI;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Internal;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Core.Interfaces;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Infrastructure.Logging;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Infrastructure.Services;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Infrastructure.Persistence;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Application.UseCases.CellOperations;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Application.UseCases.ValidationOperations;

namespace RpaWinUiComponentsPackage.AdvancedWinUiDataGrid;

/// <summary>
/// ENTERPRISE: Advanced DataGrid component for professional applications
/// ARCHITECTURE: Clean Architecture with UI and Headless operation modes
/// PERFORMANCE: Optimized for 100k-10M rows with intelligent caching and virtualization
/// VALIDATION: Comprehensive 8-type validation system with timeout protection
///
/// FEATURES:
/// - Smart row management with minimum row constraints
/// - Advanced validation (8 types): Single Cell, Cross-Column, Cross-Row, Conditional, Complex
/// - Real-time and batch validation modes with 2-second default timeout
/// - Column resizing with drag & drop and programmatic API
/// - Special columns: CheckBox, DeleteRow, ValidAlerts, RowNumber
/// - Copy/paste/import/export operations with progress reporting
/// - Configurable colors and themes without hardcoded values
/// - Keyboard shortcuts and accessibility compliance
/// - UI and Headless operation modes for automation scenarios
/// - Comprehensive logging for debug and release (unified logging levels)
/// - Performance optimization for large datasets with virtualization
/// - Global error handling with detailed logging
/// </summary>
public sealed class AdvancedDataGrid : UserControl, IDisposable
{
    #region Private Fields and Dependencies

    private readonly IDataGridLogger _logger;
    private readonly ValidationService _validationService;
    private readonly InMemoryDataGridRepository _repository;
    private readonly SetCellValueUseCase _setCellValueUseCase;
    private readonly AddValidationRuleUseCase _addValidationRuleUseCase;
    private DataGridOperationMode _operationMode = DataGridOperationMode.UI;
    private ColorConfiguration _colorConfiguration;
    private int _minimumRows = 1;
    private bool _disposed;

    // UI Components (only in UI mode)
    private Presentation.UI.AdvancedDataGridControl? _uiControl;
    private Presentation.ViewModels.DataGridViewModel? _viewModel;

    #endregion

    #region Constructor and Initialization

    /// <summary>
    /// ENTERPRISE: Create new AdvancedDataGrid instance
    /// DUAL MODE: Supports both UI and Headless operation modes
    /// </summary>
    /// <param name="externalLogger">Optional external logger (uses NullLogger if not provided)</param>
    /// <param name="operationMode">UI mode (automatic updates) or Headless mode (manual updates)</param>
    public AdvancedDataGrid(ILogger? externalLogger = null, DataGridOperationMode operationMode = DataGridOperationMode.UI)
    {
        try
        {
            // Initialize logging with null safety
            _logger = new DataGridLogger(externalLogger, "AdvancedDataGrid", logPerformance: true);
            _operationMode = operationMode;

            _logger.LogInformation("INITIALIZATION: Starting AdvancedDataGrid initialization in {Mode} mode", operationMode);

            // Initialize core services
            InitializeServices();

            // Initialize UI (only in UI mode)
            if (_operationMode == DataGridOperationMode.UI)
            {
                InitializeUserInterface();
            }

            // Initialize default configuration
            InitializeDefaultConfiguration();

            // Initialize keyboard shortcuts
            InitializeKeyboardShortcuts();

            // Initialize auto row height
            InitializeAutoRowHeight();

            // Initialize sort system
            InitializeSort();

            // Initialize performance optimization
            InitializePerformanceOptimization();

            _logger.LogInformation("INITIALIZATION: AdvancedDataGrid successfully initialized with {ValidationRules} validation types, keyboard shortcuts, auto row height support, sort system, and performance optimization",
                "8");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "INITIALIZATION: Critical error during AdvancedDataGrid initialization");
            throw;
        }
    }

    private void InitializeServices()
    {
        _logger.LogInformation("SERVICES: Initializing core services");

        // Initialize repository
        _repository = new InMemoryDataGridRepository(_logger.CreateScope("Repository"));

        // Initialize validation service
        _validationService = new ValidationService(_logger.CreateScope("Validation"));

        // Initialize use cases
        _setCellValueUseCase = new SetCellValueUseCase(_repository, _validationService, _logger.CreateScope("CellOperations"));
        _addValidationRuleUseCase = new AddValidationRuleUseCase(_validationService, _logger.CreateScope("ValidationRules"));

        _logger.LogInformation("SERVICES: Core services initialized successfully");
    }

    private void InitializeUserInterface()
    {
        _logger.LogInformation("UI: Initializing user interface components");

        // Create and initialize the presentation layer
        var viewModel = new Presentation.ViewModels.DataGridViewModel(
            _repository,
            _validationService,
            _logger.CreateScope("ViewModel"),
            _operationMode);

        var uiControl = new Presentation.UI.AdvancedDataGridControl(_logger.CreateScope("UIControl"));
        uiControl.Initialize(viewModel);

        // Set the UI control as the content
        this.Content = uiControl;
        this.HorizontalAlignment = Microsoft.UI.Xaml.HorizontalAlignment.Stretch;
        this.VerticalAlignment = Microsoft.UI.Xaml.VerticalAlignment.Stretch;

        // Store references for later use
        _uiControl = uiControl;
        _viewModel = viewModel;

        _logger.LogInformation("UI: User interface components initialized with MVVM pattern");
    }

    private void InitializeDefaultConfiguration()
    {
        _logger.LogInformation("CONFIG: Initializing default configuration");

        // Initialize default color configuration
        _colorConfiguration = ColorConfiguration.CreateDefault();

        _logger.LogInformation("CONFIG: Default configuration initialized");
    }

    #endregion

    #region Public Properties - Operation Mode and Configuration

    /// <summary>Current operation mode (UI or Headless)</summary>
    public DataGridOperationMode OperationMode => _operationMode;

    /// <summary>Minimum number of rows to maintain in the grid</summary>
    public int MinimumRows
    {
        get => _minimumRows;
        set
        {
            if (value < 0) throw new ArgumentOutOfRangeException(nameof(value), "Minimum rows cannot be negative");
            _minimumRows = value;
            _logger.LogInformation("CONFIG: Minimum rows set to {MinimumRows}", value);
        }
    }

    /// <summary>Current color configuration</summary>
    public ColorConfiguration ColorConfiguration
    {
        get => _colorConfiguration;
        set
        {
            _colorConfiguration = value ?? ColorConfiguration.CreateDefault();
            if (_operationMode == DataGridOperationMode.UI)
            {
                ApplyColorConfiguration();
            }
            _logger.LogInformation("CONFIG: Color configuration updated");
        }
    }

    #endregion

    #region Validation API - 8 Types of Validation with Timeout Support

    /// <summary>
    /// VALIDATION TYPE 1: Add single cell validation rule with timeout protection
    /// DEFAULT TIMEOUT: 2 seconds per rule per cell
    /// </summary>
    /// <param name="columnName">Column to validate</param>
    /// <param name="validator">Validation function</param>
    /// <param name="errorMessage">Error message for validation failure</param>
    /// <param name="severity">Validation severity level</param>
    /// <param name="priority">Rule execution priority (lower = higher priority)</param>
    /// <param name="ruleName">Optional unique rule name</param>
    /// <param name="timeout">Timeout for rule execution (default: 2 seconds)</param>
    public async Task<bool> AddSingleCellValidationRuleAsync(
        string columnName,
        Func<object?, bool> validator,
        string errorMessage,
        ValidationSeverity severity = ValidationSeverity.Error,
        int? priority = null,
        string? ruleName = null,
        TimeSpan? timeout = null)
    {
        try
        {
            var rule = new SingleCellValidationRule(columnName, validator, errorMessage, severity, priority, ruleName, timeout);
            var result = _addValidationRuleUseCase.Execute(rule);
            return result.IsSuccess && result.Value;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to add single cell validation rule for column '{ColumnName}'", columnName);
            return false;
        }
    }

    /// <summary>
    /// VALIDATION TYPE 2&3: Add cross-column validation rule (same row)
    /// </summary>
    public async Task<bool> AddCrossColumnValidationRuleAsync(
        string[] dependentColumns,
        Func<IReadOnlyDictionary<string, object?>, (bool isValid, string? errorMessage)> validator,
        string errorMessage,
        ValidationSeverity severity = ValidationSeverity.Error,
        int? priority = null,
        string? ruleName = null,
        TimeSpan? timeout = null)
    {
        try
        {
            var rule = new CrossColumnValidationRule(dependentColumns, validator, errorMessage, severity, priority, ruleName, timeout);
            var result = _addValidationRuleUseCase.Execute(rule);
            return result.IsSuccess && result.Value;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to add cross-column validation rule for columns [{Columns}]", string.Join(", ", dependentColumns));
            return false;
        }
    }

    /// <summary>
    /// VALIDATION TYPE 4: Add cross-row validation rule
    /// ENTERPRISE: Validate data across multiple rows for uniqueness, totals, etc.
    /// </summary>
    public async Task<bool> AddCrossRowValidationRuleAsync(
        Func<IReadOnlyList<IReadOnlyDictionary<string, object?>>, IReadOnlyList<ValidationResult>> validator,
        string errorMessage,
        ValidationSeverity severity = ValidationSeverity.Error,
        int? priority = null,
        string? ruleName = null,
        TimeSpan? timeout = null)
    {
        try
        {
            var rule = new CrossRowValidationRule(validator, errorMessage, severity, priority, ruleName, timeout);
            var result = _addValidationRuleUseCase.Execute(rule);
            return result.IsSuccess && result.Value;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to add cross-row validation rule '{RuleName}'", ruleName ?? "unnamed");
            return false;
        }
    }

    /// <summary>
    /// VALIDATION TYPE 6: Add conditional validation rule
    /// ENTERPRISE: Validates column only if condition is met
    /// </summary>
    public async Task<bool> AddConditionalValidationRuleAsync(
        string columnName,
        Func<IReadOnlyDictionary<string, object?>, bool> condition,
        ISingleCellValidationRule validationRule,
        string errorMessage,
        ValidationSeverity severity = ValidationSeverity.Error,
        int? priority = null,
        string? ruleName = null,
        TimeSpan? timeout = null)
    {
        try
        {
            var rule = new ConditionalValidationRule(columnName, condition, validationRule, errorMessage, severity, priority, ruleName, timeout);
            var result = _addValidationRuleUseCase.Execute(rule);
            return result.IsSuccess && result.Value;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to add conditional validation rule for column '{ColumnName}'", columnName);
            return false;
        }
    }

    /// <summary>
    /// VALIDATION TYPE 5&7: Add complex validation rule (cross-row & cross-column)
    /// ENTERPRISE: Validates complex business rules across entire dataset
    /// </summary>
    public async Task<bool> AddComplexValidationRuleAsync(
        Func<IReadOnlyList<IReadOnlyDictionary<string, object?>>, ValidationResult> validator,
        string errorMessage,
        ValidationSeverity severity = ValidationSeverity.Error,
        int? priority = null,
        string? ruleName = null,
        TimeSpan? timeout = null)
    {
        try
        {
            var rule = new ComplexValidationRule(validator, errorMessage, severity, priority, ruleName, timeout);
            var result = _addValidationRuleUseCase.Execute(rule);
            return result.IsSuccess && result.Value;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to add complex validation rule '{RuleName}'", ruleName ?? "unnamed");
            return false;
        }
    }

    /// <summary>
    /// VALIDATION MANAGEMENT: Remove validation rules by column names
    /// </summary>
    public async Task<bool> RemoveValidationRulesByColumnsAsync(params string[] columnNames)
    {
        try
        {
            // Implementation will be in ValidationService
            _logger.LogInformation("API: Removing validation rules for columns [{Columns}]", string.Join(", ", columnNames));
            return true; // TODO: Implement in ValidationService
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to remove validation rules for columns [{Columns}]", string.Join(", ", columnNames));
            return false;
        }
    }

    /// <summary>
    /// VALIDATION MANAGEMENT: Remove validation rule by name
    /// </summary>
    public async Task<bool> RemoveValidationRuleByNameAsync(string ruleName)
    {
        try
        {
            // Implementation will be in ValidationService
            _logger.LogInformation("API: Removing validation rule '{RuleName}'", ruleName);
            return true; // TODO: Implement in ValidationService
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to remove validation rule '{RuleName}'", ruleName);
            return false;
        }
    }

    /// <summary>
    /// VALIDATION MANAGEMENT: Clear all validation rules
    /// </summary>
    public async Task<bool> ClearAllValidationRulesAsync()
    {
        try
        {
            // Implementation will be in ValidationService
            _logger.LogInformation("API: Clearing all validation rules");
            return true; // TODO: Implement in ValidationService
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to clear all validation rules");
            return false;
        }
    }

    /// <summary>
    /// UI UPDATE: Manual UI refresh for Headless mode
    /// In UI mode, this is called automatically
    /// </summary>
    public void RefreshUI()
    {
        if (_disposed) return;

        try
        {
            _logger.LogInformation("UI: Manual UI refresh requested");

            if (_operationMode == DataGridOperationMode.Headless)
            {
                // Perform UI updates for headless mode
                ApplyColorConfiguration();

                // Refresh ViewModel data
                if (_viewModel != null)
                {
                    _ = _viewModel.RefreshDataAsync();
                }
            }

            _logger.LogInformation("UI: Manual UI refresh completed");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "UI: Error during manual UI refresh");
        }
    }

    #endregion

    #region Search & Filter API - Advanced Business Logic Support

    private SearchFilterEngine? _searchFilterEngine;

    /// <summary>
    /// ENTERPRISE: Advanced search with regex support and multiple column targeting
    /// PERFORMANCE: Optimized for large datasets with early termination
    /// </summary>
    /// <param name="searchText">Text to search for (supports regex if UseRegex is true)</param>
    /// <param name="targetColumns">Columns to search in (null = all columns)</param>
    /// <param name="caseSensitive">Case sensitive search</param>
    /// <param name="useRegex">Enable regex pattern matching</param>
    /// <param name="scope">Search scope (AllData, VisibleData, SelectedData)</param>
    /// <param name="maxMatches">Maximum number of matches to return (null = unlimited)</param>
    public async Task<IReadOnlyList<SearchResult>> SearchAsync(
        string searchText,
        string[]? targetColumns = null,
        bool caseSensitive = false,
        bool useRegex = false,
        SearchScope scope = SearchScope.AllData,
        int? maxMatches = null)
    {
        try
        {
            _logger.LogInformation("API: Starting search for '{SearchText}' with regex: {UseRegex}", searchText, useRegex);

            _searchFilterEngine ??= new SearchFilterEngine(_logger.CreateScope("SearchFilter"));

            var criteria = new AdvancedSearchCriteria
            {
                SearchText = searchText,
                TargetColumns = targetColumns,
                CaseSensitive = caseSensitive,
                UseRegex = useRegex,
                Scope = scope,
                MaxMatches = maxMatches
            };

            // Get dataset from repository
            var datasetResult = _repository.GetAllRows();
            if (!datasetResult.IsSuccess)
            {
                _logger.LogError("API: Failed to get dataset for search operation");
                return Array.Empty<SearchResult>();
            }

            var dataset = datasetResult.Value.Select(row => row.Cells.ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.Value
            )).ToList();

            var searchResult = await _searchFilterEngine.SearchAsync(dataset, criteria);

            if (searchResult.IsSuccess)
            {
                _logger.LogInformation("API: Search completed with {MatchCount} results", searchResult.Value.Count);
                return searchResult.Value;
            }
            else
            {
                _logger.LogError("API: Search failed: {Error}", searchResult.Error);
                return Array.Empty<SearchResult>();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Search operation failed");
            return Array.Empty<SearchResult>();
        }
    }

    /// <summary>
    /// ENTERPRISE: Apply complex filters with business logic combinations
    /// EXAMPLE: (Age > 18 AND Country = "US") OR (VIPStatus = true)
    /// </summary>
    public async Task<FilterResult> ApplyFiltersAsync(params FilterDefinition[] filters)
    {
        try
        {
            _logger.LogInformation("API: Applying {FilterCount} filters", filters.Length);

            _searchFilterEngine ??= new SearchFilterEngine(_logger.CreateScope("SearchFilter"));

            // Get dataset from repository
            var datasetResult = _repository.GetAllRows();
            if (!datasetResult.IsSuccess)
            {
                _logger.LogError("API: Failed to get dataset for filter operation");
                return FilterResult.Create(0, 0, TimeSpan.Zero);
            }

            var dataset = datasetResult.Value.Select(row => row.Cells.ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.Value
            )).ToList();

            var filterResult = await _searchFilterEngine.ApplyFiltersAsync(dataset, filters);

            if (filterResult.IsSuccess)
            {
                _logger.LogInformation("API: Filter completed - {MatchingRows}/{TotalRows} rows match",
                    filterResult.Value.MatchingRows, filterResult.Value.TotalRowsProcessed);

                // Apply filter to UI if in UI mode
                if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
                {
                    await _viewModel.ApplyFilterResultAsync(filterResult.Value);
                }

                return filterResult.Value;
            }
            else
            {
                _logger.LogError("API: Filter operation failed: {Error}", filterResult.Error);
                return FilterResult.Create(0, 0, TimeSpan.Zero);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Filter operation failed");
            return FilterResult.Create(0, 0, TimeSpan.Zero);
        }
    }

    /// <summary>
    /// ENTERPRISE: Clear all applied filters and show all data
    /// </summary>
    public async Task<bool> ClearFiltersAsync()
    {
        try
        {
            _logger.LogInformation("API: Clearing all applied filters");

            if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
            {
                await _viewModel.ClearFiltersAsync();
            }

            _logger.LogInformation("API: All filters cleared successfully");
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to clear filters");
            return false;
        }
    }

    /// <summary>
    /// BUSINESS LOGIC: Create business rule filter for active customers
    /// EXAMPLE: Customer is active if LastOrderDate > 90 days AND Status = "Active"
    /// </summary>
    public static FilterDefinition CreateActiveCustomerFilter() => FilterDefinition.And(
        FilterDefinition.GreaterThan("LastOrderDate", DateTime.Now.AddDays(-90)),
        FilterDefinition.Equals("Status", "Active"),
        FilterDefinition.NotEquals("IsDeleted", true)
    );

    /// <summary>
    /// BUSINESS LOGIC: Create business rule filter for high value transactions
    /// EXAMPLE: Amount > 1000 OR (Amount > 500 AND CustomerTier = "Premium")
    /// </summary>
    public static FilterDefinition CreateHighValueTransactionFilter() => FilterDefinition.Or(
        FilterDefinition.GreaterThan("Amount", 1000m),
        FilterDefinition.And(
            FilterDefinition.GreaterThan("Amount", 500m),
            FilterDefinition.Equals("CustomerTier", "Premium")
        )
    );

    #endregion

    #region Cell Operations API

    /// <summary>
    /// ENTERPRISE: Set cell value with comprehensive validation and mode awareness
    /// UI MODE: Automatic validation and UI updates
    /// HEADLESS MODE: Manual validation and UI updates via RefreshUI()
    /// </summary>
    public async Task<bool> SetCellValueAsync(int rowIndex, string columnName, object? value)
    {
        try
        {
            var result = await _setCellValueUseCase.ExecuteAsync(rowIndex, columnName, value, _operationMode);
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to set cell value [{RowIndex}, {ColumnName}]", rowIndex, columnName);
            return false;
        }
    }

    /// <summary>
    /// ENTERPRISE: Get cell value with error handling
    /// </summary>
    public object? GetCellValue(int rowIndex, string columnName)
    {
        try
        {
            var cellResult = _repository.GetCell(rowIndex, columnName);
            return cellResult.IsSuccess ? cellResult.Value?.Value : null;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Failed to get cell value [{RowIndex}, {ColumnName}]", rowIndex, columnName);
            return null;
        }
    }

    #endregion

    #region Copy/Paste/Import/Export API - Enterprise Data Operations

    private CopyPasteImportExportEngine? _copyPasteEngine;

    /// <summary>
    /// ENTERPRISE: Copy selected data to clipboard or return as string
    /// FORMATS: Tab-delimited, CSV, JSON for easy data transfer
    /// </summary>
    public async Task<string> CopyDataAsync(
        SelectionRange? selection = null,
        DataFormat format = DataFormat.Tab)
    {
        try
        {
            _logger.LogInformation("API: Starting copy operation with format {Format}", format);

            _copyPasteEngine ??= new CopyPasteImportExportEngine(_logger.CreateScope("CopyPasteEngine"));

            // Get dataset from repository
            var datasetResult = _repository.GetAllRows();
            if (!datasetResult.IsSuccess)
            {
                _logger.LogError("API: Failed to get dataset for copy operation");
                return string.Empty;
            }

            var dataset = datasetResult.Value.Select(row => row.Cells.ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.Value
            )).ToList();

            var copyResult = await _copyPasteEngine.CopyDataAsync(dataset, selection ?? SelectionRange.All, format);

            if (copyResult.IsSuccess)
            {
                _logger.LogInformation("API: Copy operation completed successfully");
                return copyResult.Value;
            }
            else
            {
                _logger.LogError("API: Copy operation failed: {Error}", copyResult.Error);
                return string.Empty;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Copy operation failed");
            return string.Empty;
        }
    }

    /// <summary>
    /// ENTERPRISE: Paste data from clipboard or string with intelligent parsing
    /// AUTO-DETECTION: Automatically detects tab/CSV format and handles column mapping
    /// </summary>
    public async Task<ImportResult> PasteDataAsync(
        string data,
        ImportMode mode = ImportMode.Replace,
        bool validateBeforeImport = true,
        Dictionary<string, string>? columnMapping = null)
    {
        try
        {
            _logger.LogInformation("API: Starting paste operation with mode {Mode}", mode);

            _copyPasteEngine ??= new CopyPasteImportExportEngine(_logger.CreateScope("CopyPasteEngine"));

            var options = new ImportOptions
            {
                Mode = mode,
                ValidateBeforeImport = validateBeforeImport,
                ColumnMapping = columnMapping,
                Format = DataFormat.Clipboard
            };

            var pasteResult = await _copyPasteEngine.PasteDataAsync(data, options);

            if (pasteResult.IsSuccess)
            {
                _logger.LogInformation("API: Paste operation completed - {ImportedRows} rows imported",
                    pasteResult.Value.ImportedRows);

                // Apply changes to UI if in UI mode
                if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
                {
                    await _viewModel.RefreshDataAsync();
                }

                return pasteResult.Value;
            }
            else
            {
                _logger.LogError("API: Paste operation failed: {Error}", pasteResult.Error);
                return ImportResult.Failure(new[] { pasteResult.Error ?? "Unknown error" }, TimeSpan.Zero);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Paste operation failed");
            return ImportResult.Failure(new[] { ex.Message }, TimeSpan.Zero);
        }
    }

    /// <summary>
    /// ENTERPRISE: Import data from DataTable with advanced options
    /// ENTERPRISE INTEGRATION: Perfect for database and enterprise data sources
    /// </summary>
    public async Task<ImportResult> ImportFromDataTableAsync(
        DataTable dataTable,
        ImportMode mode = ImportMode.Replace,
        bool validateBeforeImport = true,
        Dictionary<string, string>? columnMapping = null,
        IProgress<ImportProgress>? progress = null)
    {
        try
        {
            _logger.LogInformation("API: Starting DataTable import - {RowCount} rows, {ColumnCount} columns",
                dataTable.Rows.Count, dataTable.Columns.Count);

            _copyPasteEngine ??= new CopyPasteImportExportEngine(_logger.CreateScope("CopyPasteEngine"));

            var options = new ImportOptions
            {
                Mode = mode,
                ValidateBeforeImport = validateBeforeImport,
                ColumnMapping = columnMapping,
                Format = DataFormat.DataTable,
                Progress = progress
            };

            var importResult = await _copyPasteEngine.ImportDataAsync(dataTable, options);

            if (importResult.IsSuccess)
            {
                _logger.LogInformation("API: DataTable import completed - {ImportedRows} rows imported",
                    importResult.Value.ImportedRows);

                // Apply changes to UI if in UI mode
                if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
                {
                    await _viewModel.RefreshDataAsync();
                }

                return importResult.Value;
            }
            else
            {
                _logger.LogError("API: DataTable import failed: {Error}", importResult.Error);
                return ImportResult.Failure(importResult.Value?.ErrorMessages ?? new[] { "Unknown error" }, TimeSpan.Zero);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: DataTable import failed");
            return ImportResult.Failure(new[] { ex.Message }, TimeSpan.Zero);
        }
    }

    /// <summary>
    /// ENTERPRISE: Import data from Dictionary collection
    /// PERFORMANCE: Optimized for large datasets with progress reporting
    /// </summary>
    public async Task<ImportResult> ImportFromDictionaryAsync(
        IEnumerable<Dictionary<string, object?>> data,
        ImportMode mode = ImportMode.Replace,
        bool validateBeforeImport = true,
        Dictionary<string, string>? columnMapping = null,
        IProgress<ImportProgress>? progress = null)
    {
        try
        {
            var dataList = data.ToList();
            _logger.LogInformation("API: Starting Dictionary import - {RowCount} rows", dataList.Count);

            _copyPasteEngine ??= new CopyPasteImportExportEngine(_logger.CreateScope("CopyPasteEngine"));

            var options = new ImportOptions
            {
                Mode = mode,
                ValidateBeforeImport = validateBeforeImport,
                ColumnMapping = columnMapping,
                Format = DataFormat.Dictionary,
                Progress = progress
            };

            var importResult = await _copyPasteEngine.ImportDataAsync(dataList, options);

            if (importResult.IsSuccess)
            {
                _logger.LogInformation("API: Dictionary import completed - {ImportedRows} rows imported",
                    importResult.Value.ImportedRows);

                // Apply changes to UI if in UI mode
                if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
                {
                    await _viewModel.RefreshDataAsync();
                }

                return importResult.Value;
            }
            else
            {
                _logger.LogError("API: Dictionary import failed: {Error}", importResult.Error);
                return ImportResult.Failure(importResult.Value?.ErrorMessages ?? new[] { "Unknown error" }, TimeSpan.Zero);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Dictionary import failed");
            return ImportResult.Failure(new[] { ex.Message }, TimeSpan.Zero);
        }
    }

    /// <summary>
    /// ENTERPRISE: Export data to DataTable format
    /// ENTERPRISE INTEGRATION: Perfect for database and enterprise data consumers
    /// </summary>
    public async Task<DataTable> ExportToDataTableAsync(
        bool includeHeaders = true,
        bool exportOnlyChecked = false,
        bool exportOnlyFiltered = false,
        IProgress<ExportProgress>? progress = null)
    {
        try
        {
            _logger.LogInformation("API: Starting DataTable export");

            _copyPasteEngine ??= new CopyPasteImportExportEngine(_logger.CreateScope("CopyPasteEngine"));

            // Get dataset from repository
            var datasetResult = _repository.GetAllRows();
            if (!datasetResult.IsSuccess)
            {
                _logger.LogError("API: Failed to get dataset for export operation");
                return new DataTable();
            }

            var dataset = datasetResult.Value.Select(row => row.Cells.ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.Value
            )).ToList();

            var options = new ExportOptions
            {
                Format = DataFormat.DataTable,
                IncludeHeaders = includeHeaders,
                ExportOnlyChecked = exportOnlyChecked,
                ExportOnlyFiltered = exportOnlyFiltered,
                Progress = progress
            };

            var exportResult = await _copyPasteEngine.ExportDataAsync(dataset, options);

            if (exportResult.IsSuccess)
            {
                _logger.LogInformation("API: DataTable export completed - {ExportedRows} rows",
                    exportResult.Value.ExportedRows);

                // The result should contain a DataTable - this is a simplified implementation
                return new DataTable(); // TODO: Return actual DataTable from export result
            }
            else
            {
                _logger.LogError("API: DataTable export failed: {Error}", exportResult.Error);
                return new DataTable();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: DataTable export failed");
            return new DataTable();
        }
    }

    /// <summary>
    /// ENTERPRISE: Export data to Dictionary collection
    /// PERFORMANCE: Memory-efficient streaming for large datasets
    /// </summary>
    public async Task<IEnumerable<Dictionary<string, object?>>> ExportToDictionaryAsync(
        bool includeValidationAlerts = false,
        bool exportOnlyChecked = false,
        bool exportOnlyFiltered = false,
        IProgress<ExportProgress>? progress = null)
    {
        try
        {
            _logger.LogInformation("API: Starting Dictionary export");

            _copyPasteEngine ??= new CopyPasteImportExportEngine(_logger.CreateScope("CopyPasteEngine"));

            // Get dataset from repository
            var datasetResult = _repository.GetAllRows();
            if (!datasetResult.IsSuccess)
            {
                _logger.LogError("API: Failed to get dataset for export operation");
                return Enumerable.Empty<Dictionary<string, object?>>();
            }

            var dataset = datasetResult.Value.Select(row => row.Cells.ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.Value
            )).ToList();

            var options = new ExportOptions
            {
                Format = DataFormat.Dictionary,
                IncludeValidationAlerts = includeValidationAlerts,
                ExportOnlyChecked = exportOnlyChecked,
                ExportOnlyFiltered = exportOnlyFiltered,
                Progress = progress
            };

            var exportResult = await _copyPasteEngine.ExportDataAsync(dataset, options);

            if (exportResult.IsSuccess)
            {
                _logger.LogInformation("API: Dictionary export completed - {ExportedRows} rows",
                    exportResult.Value.ExportedRows);

                return dataset; // Return the filtered dataset
            }
            else
            {
                _logger.LogError("API: Dictionary export failed: {Error}", exportResult.Error);
                return Enumerable.Empty<Dictionary<string, object?>>();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: Dictionary export failed");
            return Enumerable.Empty<Dictionary<string, object?>>();
        }
    }

    /// <summary>
    /// ENTERPRISE: Export data to file with multiple format support
    /// FORMATS: CSV, JSON, Excel with customizable options
    /// </summary>
    public async Task<ExportResult> ExportToFileAsync(
        string filePath,
        DataFormat format = DataFormat.Csv,
        ExportOptions? options = null)
    {
        try
        {
            _logger.LogInformation("API: Starting file export to '{FilePath}' with format {Format}", filePath, format);

            _copyPasteEngine ??= new CopyPasteImportExportEngine(_logger.CreateScope("CopyPasteEngine"));

            // Get dataset from repository
            var datasetResult = _repository.GetAllRows();
            if (!datasetResult.IsSuccess)
            {
                _logger.LogError("API: Failed to get dataset for export operation");
                return ExportResult.Failure(new[] { "Failed to get dataset" }, TimeSpan.Zero);
            }

            var dataset = datasetResult.Value.Select(row => row.Cells.ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.Value
            )).ToList();

            var exportOptions = options ?? ExportOptions.Default with { FilePath = filePath, Format = format };

            var exportResult = await _copyPasteEngine.ExportDataAsync(dataset, exportOptions);

            if (exportResult.IsSuccess)
            {
                _logger.LogInformation("API: File export completed - {ExportedRows} rows exported to '{FilePath}'",
                    exportResult.Value.ExportedRows, filePath);

                return exportResult.Value;
            }
            else
            {
                _logger.LogError("API: File export failed: {Error}", exportResult.Error);
                return ExportResult.Failure(exportResult.Value?.ErrorMessages ?? new[] { "Unknown error" }, TimeSpan.Zero);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "API: File export failed");
            return ExportResult.Failure(new[] { ex.Message }, TimeSpan.Zero);
        }
    }

    #endregion

    #region Color Configuration API

    /// <summary>
    /// ENTERPRISE: Apply current color configuration to UI elements
    /// </summary>
    private void ApplyColorConfiguration()
    {
        try
        {
            _logger.LogInformation("UI: Applying color configuration");

            // Apply background color to main control
            this.Background = new Microsoft.UI.Xaml.Media.SolidColorBrush(_colorConfiguration.GridBackgroundColor);

            // Apply color configuration to UI control and ViewModel
            if (_uiControl != null)
            {
                _uiControl.ApplyColorConfiguration(_colorConfiguration);
            }

            if (_viewModel != null)
            {
                _viewModel.ColorConfiguration = _colorConfiguration;
            }

            _logger.LogInformation("UI: Color configuration applied successfully");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "UI: Error applying color configuration");
        }
    }

    /// <summary>
    /// CONFIGURATION: Set specific UI element color
    /// </summary>
    public void SetElementColor(string elementName, Color color)
    {
        try
        {
            _logger.LogInformation("CONFIG: Setting color for element '{ElementName}' to {Color}", elementName, color);

            // Update color configuration based on element name
            var newConfig = _colorConfiguration with
            {
                GridBackgroundColor = elementName == "GridBackground" ? color : _colorConfiguration.GridBackgroundColor,
                HeaderBackgroundColor = elementName == "HeaderBackground" ? color : _colorConfiguration.HeaderBackgroundColor,
                ValidationErrorTextColor = elementName == "ValidationError" ? color : _colorConfiguration.ValidationErrorTextColor
            };

            ColorConfiguration = newConfig;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "CONFIG: Error setting element color for '{ElementName}'", elementName);
        }
    }

    #endregion

    #region Keyboard Shortcuts API - Professional Excel-like Navigation

    private KeyboardShortcutEngine? _keyboardEngine;
    private KeyboardShortcutConfiguration _shortcutConfiguration;

    /// <summary>
    /// ENTERPRISE: Configure keyboard shortcuts for professional data entry
    /// EXCEL-LIKE: Navigation, editing, selection shortcuts like Excel
    /// </summary>
    public KeyboardShortcutConfiguration ShortcutConfiguration
    {
        get => _shortcutConfiguration;
        set
        {
            _shortcutConfiguration = value ?? KeyboardShortcutConfiguration.CreateDefault();
            if (_keyboardEngine != null)
            {
                _keyboardEngine.UpdateConfiguration(_shortcutConfiguration);
            }
            _logger.LogInformation("CONFIG: Keyboard shortcuts updated with {ShortcutCount} shortcuts",
                _shortcutConfiguration.Shortcuts.Count);
        }
    }

    /// <summary>
    /// ENTERPRISE: Add custom keyboard shortcut
    /// EXTENSIBILITY: Allow external customization of shortcuts
    /// </summary>
    public void AddKeyboardShortcut(KeyboardShortcut shortcut, Func<Task<bool>>? customHandler = null)
    {
        try
        {
            _shortcutConfiguration.AddShortcut(shortcut);

            if (customHandler != null && _keyboardEngine != null)
            {
                _keyboardEngine.RegisterActionHandler(shortcut.Action, customHandler);
            }

            _logger.LogInformation("SHORTCUTS: Added custom shortcut {Shortcut} -> {Action}",
                shortcut.ToDisplayString(), shortcut.Action);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SHORTCUTS: Failed to add custom shortcut");
        }
    }

    /// <summary>
    /// ENTERPRISE: Remove keyboard shortcut
    /// </summary>
    public bool RemoveKeyboardShortcut(VirtualKey key, bool ctrl = false, bool shift = false, bool alt = false)
    {
        try
        {
            var removed = _shortcutConfiguration.RemoveShortcut(key, ctrl, shift, alt);
            if (removed)
            {
                _logger.LogInformation("SHORTCUTS: Removed shortcut {Key} with modifiers Ctrl={Ctrl}, Shift={Shift}, Alt={Alt}",
                    key, ctrl, shift, alt);
            }
            return removed;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SHORTCUTS: Failed to remove shortcut");
            return false;
        }
    }

    /// <summary>
    /// ENTERPRISE: Get all available keyboard shortcuts for documentation/help
    /// </summary>
    public IReadOnlyDictionary<string, KeyboardShortcut> GetAvailableShortcuts()
    {
        return _shortcutConfiguration.Shortcuts;
    }

    /// <summary>
    /// PRESET: Apply Excel-like keyboard shortcuts (default)
    /// PROFESSIONAL: Complete navigation, editing, selection shortcuts
    /// </summary>
    public void UseExcelLikeShortcuts()
    {
        try
        {
            ShortcutConfiguration = KeyboardShortcutConfiguration.CreateDefault();
            _logger.LogInformation("SHORTCUTS: Applied Excel-like shortcuts");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SHORTCUTS: Failed to apply Excel-like shortcuts");
        }
    }

    /// <summary>
    /// PRESET: Apply minimal keyboard shortcuts for basic operations
    /// SIMPLE: Only essential navigation and editing shortcuts
    /// </summary>
    public void UseMinimalShortcuts()
    {
        try
        {
            ShortcutConfiguration = KeyboardShortcutConfiguration.CreateMinimal();
            _logger.LogInformation("SHORTCUTS: Applied minimal shortcuts");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SHORTCUTS: Failed to apply minimal shortcuts");
        }
    }

    /// <summary>
    /// CUSTOMIZATION: Create custom shortcut configuration with fluent API
    /// EXAMPLE: CreateCustomShortcuts().WithNavigationShortcuts().WithEditingShortcuts()
    /// </summary>
    public KeyboardShortcutConfiguration CreateCustomShortcuts()
    {
        return new KeyboardShortcutConfiguration();
    }

    /// <summary>
    /// INTERNAL: Initialize keyboard shortcut engine
    /// </summary>
    private void InitializeKeyboardShortcuts()
    {
        try
        {
            _shortcutConfiguration = KeyboardShortcutConfiguration.CreateDefault();
            _keyboardEngine = new KeyboardShortcutEngine(_logger.CreateScope("KeyboardEngine"), _shortcutConfiguration);

            // Register handlers that integrate with the DataGrid's functionality
            RegisterDataGridKeyboardHandlers();

            _logger.LogInformation("SHORTCUTS: Keyboard shortcut engine initialized");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SHORTCUTS: Failed to initialize keyboard shortcuts");
        }
    }

    /// <summary>
    /// INTERNAL: Register DataGrid-specific keyboard handlers
    /// </summary>
    private void RegisterDataGridKeyboardHandlers()
    {
        if (_keyboardEngine == null) return;

        // Copy/Paste integration with DataGrid's Copy/Paste API
        _keyboardEngine.RegisterActionHandler(ShortcutAction.Copy, async () =>
        {
            var data = await CopyDataAsync();
            return !string.IsNullOrEmpty(data);
        });

        _keyboardEngine.RegisterActionHandler(ShortcutAction.Paste, async () =>
        {
            // TODO: Get data from clipboard and paste
            // var clipboardData = await GetClipboardDataAsync();
            // var result = await PasteDataAsync(clipboardData);
            // return result.IsSuccess;
            await Task.Delay(1);
            return true;
        });

        // Search/Filter integration
        _keyboardEngine.RegisterActionHandler(ShortcutAction.ToggleSearchMode, async () =>
        {
            // TODO: Toggle search UI mode
            _logger.LogInformation("SHORTCUTS: Search mode toggled");
            await Task.Delay(1);
            return true;
        });

        _keyboardEngine.RegisterActionHandler(ShortcutAction.ToggleFilterMode, async () =>
        {
            // TODO: Toggle filter UI mode
            _logger.LogInformation("SHORTCUTS: Filter mode toggled");
            await Task.Delay(1);
            return true;
        });

        _keyboardEngine.RegisterActionHandler(ShortcutAction.ClearFilters, async () =>
        {
            var result = await ClearFiltersAsync();
            return result;
        });

        // Refresh integration
        _keyboardEngine.RegisterActionHandler(ShortcutAction.Refresh, async () =>
        {
            RefreshUI();
            return true;
        });

        // Validation operations
        _keyboardEngine.RegisterActionHandler(ShortcutAction.SelectAll, async () =>
        {
            // TODO: Implement select all cells functionality
            _logger.LogInformation("SHORTCUTS: Select all executed");
            await Task.Delay(1);
            return true;
        });

        _logger.LogInformation("SHORTCUTS: DataGrid keyboard handlers registered");
    }

    /// <summary>
    /// INTERNAL: Handle key press events (called from UI layer)
    /// </summary>
    internal async Task<bool> HandleKeyPressAsync(KeyRoutedEventArgs e)
    {
        if (_keyboardEngine == null || _disposed) return false;

        return await _keyboardEngine.HandleKeyPressAsync(e);
    }

    #endregion

    #region Auto Row Height API - Multiline Text Support

    private AutoRowHeightEngine? _autoRowHeightEngine;
    private AutoRowHeightConfiguration _autoRowHeightConfiguration;

    /// <summary>
    /// ENTERPRISE: Configure auto row height for multiline text support
    /// PROFESSIONAL: Automatic sizing based on content with performance optimization
    /// </summary>
    public AutoRowHeightConfiguration AutoRowHeightConfiguration
    {
        get => _autoRowHeightConfiguration;
        set
        {
            _autoRowHeightConfiguration = value ?? AutoRowHeightConfiguration.Default;
            if (_autoRowHeightEngine != null)
            {
                _autoRowHeightEngine.UpdateConfiguration(_autoRowHeightConfiguration);
            }
            _logger.LogInformation("CONFIG: Auto row height configuration updated - Min: {MinHeight}, Max: {MaxHeight}",
                _autoRowHeightConfiguration.MinimumRowHeight, _autoRowHeightConfiguration.MaximumRowHeight);
        }
    }

    /// <summary>
    /// ENTERPRISE: Enable/disable auto row height functionality
    /// UI/HEADLESS: Works in both modes with manual refresh option
    /// </summary>
    public bool IsAutoRowHeightEnabled
    {
        get => _autoRowHeightConfiguration.IsEnabled;
        set
        {
            _autoRowHeightConfiguration = _autoRowHeightConfiguration with { IsEnabled = value };
            if (_autoRowHeightEngine != null)
            {
                _autoRowHeightEngine.UpdateConfiguration(_autoRowHeightConfiguration);
            }

            _logger.LogInformation("CONFIG: Auto row height {Status}", value ? "enabled" : "disabled");

            // Refresh UI if in UI mode and enabling auto height
            if (value && _operationMode == DataGridOperationMode.UI)
            {
                _ = Task.Run(async () => await RefreshAllRowHeightsAsync());
            }
        }
    }

    /// <summary>
    /// ENTERPRISE: Calculate and apply optimal row height for specific row
    /// PERFORMANCE: Cached calculation with intelligent text measurement
    /// </summary>
    public async Task<double> CalculateRowHeightAsync(int rowIndex)
    {
        try
        {
            if (!_autoRowHeightConfiguration.IsEnabled)
            {
                return _autoRowHeightConfiguration.MinimumRowHeight;
            }

            _autoRowHeightEngine ??= new AutoRowHeightEngine(_logger.CreateScope("AutoRowHeight"), _autoRowHeightConfiguration);

            // Get row data
            var rowResult = _repository.GetRow(rowIndex);
            if (!rowResult.IsSuccess)
            {
                _logger.LogWarning("AUTO_HEIGHT: Could not get row data for index {RowIndex}", rowIndex);
                return _autoRowHeightConfiguration.MinimumRowHeight;
            }

            var rowData = rowResult.Value.Cells.ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value.Value
            );

            // Get column widths - for now use default, but should come from UI
            var columnWidths = rowData.Keys.ToDictionary(key => key, key => 150.0);

            var result = await _autoRowHeightEngine.CalculateRowHeightAsync(rowIndex, rowData, columnWidths);

            _logger.LogTrace("AUTO_HEIGHT: Calculated height for row {RowIndex}: {Height}px", rowIndex, result.CalculatedHeight);

            // Apply height to UI if in UI mode
            if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
            {
                await _viewModel.UpdateRowHeightAsync(rowIndex, result.CalculatedHeight);
            }

            return result.CalculatedHeight;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "AUTO_HEIGHT: Error calculating row height for row {RowIndex}", rowIndex);
            return _autoRowHeightConfiguration.MinimumRowHeight;
        }
    }

    /// <summary>
    /// ENTERPRISE: Calculate and apply optimal heights for multiple rows
    /// PERFORMANCE: Batch processing with progress reporting for large datasets
    /// </summary>
    public async Task<IReadOnlyDictionary<int, double>> CalculateBatchRowHeightsAsync(
        IEnumerable<int> rowIndices,
        IProgress<BatchCalculationProgress>? progress = null)
    {
        try
        {
            if (!_autoRowHeightConfiguration.IsEnabled)
            {
                return new Dictionary<int, double>();
            }

            var indices = rowIndices.ToList();
            _logger.LogInformation("AUTO_HEIGHT: Starting batch calculation for {RowCount} rows", indices.Count);

            _autoRowHeightEngine ??= new AutoRowHeightEngine(_logger.CreateScope("AutoRowHeight"), _autoRowHeightConfiguration);

            // Prepare row data
            var rowsData = new List<(int index, IReadOnlyDictionary<string, object?> data)>();
            foreach (var rowIndex in indices)
            {
                var rowResult = _repository.GetRow(rowIndex);
                if (rowResult.IsSuccess)
                {
                    var rowData = rowResult.Value.Cells.ToDictionary(
                        kvp => kvp.Key,
                        kvp => kvp.Value.Value
                    );
                    rowsData.Add((rowIndex, rowData));
                }
            }

            // Get column widths - for now use default, but should come from UI
            var allColumns = rowsData.SelectMany(r => r.data.Keys).Distinct().ToList();
            var columnWidths = allColumns.ToDictionary(col => col, col => 150.0);

            var results = await _autoRowHeightEngine.CalculateBatchRowHeightsAsync(rowsData, columnWidths, progress);

            var heightsDictionary = results.ToDictionary(r => r.RowIndex, r => r.CalculatedHeight);

            // Apply heights to UI if in UI mode
            if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
            {
                await _viewModel.UpdateBatchRowHeightsAsync(heightsDictionary);
            }

            _logger.LogInformation("AUTO_HEIGHT: Batch calculation completed for {RowCount} rows", results.Count);

            return heightsDictionary;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "AUTO_HEIGHT: Error during batch row height calculation");
            return new Dictionary<int, double>();
        }
    }

    /// <summary>
    /// ENTERPRISE: Refresh heights for all visible rows
    /// UI OPTIMIZATION: Only calculates heights for currently visible rows in large datasets
    /// </summary>
    public async Task<IReadOnlyDictionary<int, double>> RefreshAllRowHeightsAsync()
    {
        try
        {
            if (!_autoRowHeightConfiguration.IsEnabled)
            {
                _logger.LogInformation("AUTO_HEIGHT: Auto row height disabled, skipping refresh");
                return new Dictionary<int, double>();
            }

            _logger.LogInformation("AUTO_HEIGHT: Refreshing all row heights");

            // Get all rows from repository
            var allRowsResult = _repository.GetAllRows();
            if (!allRowsResult.IsSuccess)
            {
                _logger.LogError("AUTO_HEIGHT: Could not get rows for height refresh");
                return new Dictionary<int, double>();
            }

            var rowIndices = Enumerable.Range(0, allRowsResult.Value.Count);

            var progress = new Progress<BatchCalculationProgress>(p =>
            {
                _logger.LogTrace("AUTO_HEIGHT: Refresh progress: {Progress:F1}% ({Processed}/{Total})",
                    p.CompletionPercentage, p.ProcessedRows, p.TotalRows);
            });

            return await CalculateBatchRowHeightsAsync(rowIndices, progress);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "AUTO_HEIGHT: Error refreshing all row heights");
            return new Dictionary<int, double>();
        }
    }

    /// <summary>
    /// ENTERPRISE: Invalidate height cache for specific row (call when content changes)
    /// PERFORMANCE: Efficient cache management for dynamic content
    /// </summary>
    public void InvalidateRowHeight(int rowIndex)
    {
        try
        {
            _autoRowHeightEngine?.InvalidateRowCache(rowIndex);
            _logger.LogTrace("AUTO_HEIGHT: Invalidated height cache for row {RowIndex}", rowIndex);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "AUTO_HEIGHT: Error invalidating row height cache for row {RowIndex}", rowIndex);
        }
    }

    /// <summary>
    /// ENTERPRISE: Clear all height measurement caches
    /// MEMORY: Free up memory when processing large datasets
    /// </summary>
    public void ClearRowHeightCaches()
    {
        try
        {
            _autoRowHeightEngine?.ClearCaches();
            _logger.LogInformation("AUTO_HEIGHT: All row height caches cleared");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "AUTO_HEIGHT: Error clearing row height caches");
        }
    }

    /// <summary>
    /// PRESET: Apply compact row height configuration
    /// SPACE-EFFICIENT: Smaller heights for dense data display
    /// </summary>
    public void UseCompactRowHeights()
    {
        try
        {
            AutoRowHeightConfiguration = AutoRowHeightConfiguration.Compact;
            _logger.LogInformation("AUTO_HEIGHT: Applied compact row height configuration");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "AUTO_HEIGHT: Failed to apply compact row heights");
        }
    }

    /// <summary>
    /// PRESET: Apply spacious row height configuration
    /// READABILITY: Larger heights for better text readability
    /// </summary>
    public void UseSpacioasRowHeights()
    {
        try
        {
            AutoRowHeightConfiguration = AutoRowHeightConfiguration.Spacious;
            _logger.LogInformation("AUTO_HEIGHT: Applied spacious row height configuration");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "AUTO_HEIGHT: Failed to apply spacious row heights");
        }
    }

    /// <summary>
    /// INTERNAL: Initialize auto row height engine
    /// </summary>
    private void InitializeAutoRowHeight()
    {
        try
        {
            _autoRowHeightConfiguration = AutoRowHeightConfiguration.Default;
            _autoRowHeightEngine = new AutoRowHeightEngine(_logger.CreateScope("AutoRowHeight"), _autoRowHeightConfiguration);

            _logger.LogInformation("AUTO_HEIGHT: Auto row height engine initialized");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "AUTO_HEIGHT: Failed to initialize auto row height engine");
        }
    }

    #endregion

    #region Sort System API - Column Sorting

    private SortEngine? _sortEngine;
    private SortConfiguration _sortConfiguration;

    /// <summary>
    /// ENTERPRISE: Configure sort behavior for the grid
    /// PROFESSIONAL: Multi-column sorting with priority and custom comparers
    /// </summary>
    public SortConfiguration SortConfiguration
    {
        get => _sortConfiguration;
        set
        {
            _sortConfiguration = value ?? SortConfiguration.Default;
            if (_sortEngine != null)
            {
                _sortEngine.UpdateConfiguration(_sortConfiguration);
            }
            _logger.LogInformation("CONFIG: Sort configuration updated - Multi-column: {AllowMulti}, Max columns: {MaxColumns}",
                _sortConfiguration.AllowMultiColumnSort, _sortConfiguration.MaxSortColumns);
        }
    }

    /// <summary>
    /// ENTERPRISE: Sort data by single column
    /// CONVENIENCE: Quick sorting without complex configuration
    /// </summary>
    public async Task<SortResult> SortByColumnAsync(string columnName, SortDirection direction, IComparer<object?>? customComparer = null)
    {
        try
        {
            _logger.LogInformation("SORT_API: Sorting by column {ColumnName} in {Direction} direction", columnName, direction);

            _sortEngine ??= new SortEngine(_logger.CreateScope("SortEngine"), _sortConfiguration);

            var currentData = await GetCurrentDataAsync();
            var result = await _sortEngine.SortByColumnAsync(currentData, columnName, direction, customComparer);

            if (result.SortedData.Count > 0)
            {
                // Apply sorted data back to grid
                await ApplySortedDataAsync(result.SortedData);
            }

            _logger.LogInformation("SORT_API: Column sort completed - {RowCount} rows sorted in {Time}ms",
                result.ProcessedRows, result.SortTime.TotalMilliseconds);

            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_API: Error sorting by column {ColumnName}", columnName);
            return SortResult.Empty;
        }
    }

    /// <summary>
    /// ENTERPRISE: Sort data by multiple columns with priority
    /// ADVANCED: Complex sorting scenarios with configuration
    /// </summary>
    public async Task<SortResult> SortByMultipleColumnsAsync()
    {
        try
        {
            _logger.LogInformation("SORT_API: Starting multi-column sort with {ColumnCount} sort columns",
                _sortConfiguration.SortColumns.Count);

            _sortEngine ??= new SortEngine(_logger.CreateScope("SortEngine"), _sortConfiguration);

            var currentData = await GetCurrentDataAsync();
            var result = await _sortEngine.SortDataAsync(currentData);

            if (result.SortedData.Count > 0)
            {
                // Apply sorted data back to grid
                await ApplySortedDataAsync(result.SortedData);
            }

            _logger.LogInformation("SORT_API: Multi-column sort completed - {RowCount} rows sorted in {Time}ms",
                result.ProcessedRows, result.SortTime.TotalMilliseconds);

            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_API: Error during multi-column sort");
            return SortResult.Empty;
        }
    }

    /// <summary>
    /// CONVENIENCE: Toggle sort direction for specific column
    /// UI INTEGRATION: Perfect for column header click handlers
    /// </summary>
    public async Task<SortResult> ToggleColumnSortAsync(string columnName, bool clearOtherSorts = false)
    {
        try
        {
            _logger.LogInformation("SORT_API: Toggling sort for column {ColumnName}, clear others: {ClearOthers}",
                columnName, clearOtherSorts);

            _sortConfiguration.ToggleColumnSort(columnName);

            if (clearOtherSorts && _sortConfiguration.AllowMultiColumnSort)
            {
                var currentDirection = _sortConfiguration.GetColumnSortDirection(columnName);
                _sortConfiguration.ClearAllSorts();
                if (currentDirection != SortDirection.None)
                {
                    _sortConfiguration.SetColumnSort(columnName, currentDirection, clearOthers: true);
                }
            }

            return await SortByMultipleColumnsAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_API: Error toggling column sort for {ColumnName}", columnName);
            return SortResult.Empty;
        }
    }

    /// <summary>
    /// CONFIGURATION: Add sort for specific column
    /// FLUENT API: Chainable configuration method
    /// </summary>
    public async Task<SortResult> AddColumnSortAsync(string columnName, SortDirection direction, bool clearOthers = false)
    {
        try
        {
            _logger.LogInformation("SORT_API: Adding sort for column {ColumnName} in {Direction} direction",
                columnName, direction);

            _sortConfiguration.SetColumnSort(columnName, direction, clearOthers);
            return await SortByMultipleColumnsAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_API: Error adding column sort for {ColumnName}", columnName);
            return SortResult.Empty;
        }
    }

    /// <summary>
    /// CONFIGURATION: Remove sort for specific column
    /// MANAGEMENT: Clean up sorting configuration
    /// </summary>
    public async Task<SortResult> RemoveColumnSortAsync(string columnName)
    {
        try
        {
            _logger.LogInformation("SORT_API: Removing sort for column {ColumnName}", columnName);

            _sortConfiguration.RemoveColumnSort(columnName);
            return await SortByMultipleColumnsAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_API: Error removing column sort for {ColumnName}", columnName);
            return SortResult.Empty;
        }
    }

    /// <summary>
    /// CONFIGURATION: Clear all sorting
    /// RESET: Return to unsorted state
    /// </summary>
    public async Task ClearAllSortsAsync()
    {
        try
        {
            _logger.LogInformation("SORT_API: Clearing all sorts");

            _sortConfiguration.ClearAllSorts();

            // Refresh data to original order if needed
            if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
            {
                await _viewModel.RefreshDataAsync();
            }

            _logger.LogInformation("SORT_API: All sorts cleared");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_API: Error clearing all sorts");
        }
    }

    /// <summary>
    /// QUERY: Get current sort direction for column
    /// INTEGRATION: For UI state management
    /// </summary>
    public SortDirection GetColumnSortDirection(string columnName)
    {
        return _sortConfiguration.GetColumnSortDirection(columnName);
    }

    /// <summary>
    /// QUERY: Get current sort priority for column (-1 if not sorted)
    /// INTEGRATION: For UI sort indicators
    /// </summary>
    public int GetColumnSortPriority(string columnName)
    {
        return _sortConfiguration.GetColumnSortPriority(columnName);
    }

    /// <summary>
    /// QUERY: Get all current sort configurations
    /// INFORMATION: For debugging and UI display
    /// </summary>
    public IReadOnlyList<SortColumnConfiguration> GetActiveSorts()
    {
        return _sortConfiguration.SortColumns;
    }

    /// <summary>
    /// INTERNAL: Get current data for sorting operations
    /// </summary>
    private async Task<IReadOnlyList<IReadOnlyDictionary<string, object?>>> GetCurrentDataAsync()
    {
        try
        {
            if (_repository?.GetAllAsync != null)
            {
                var repositoryData = await _repository.GetAllAsync();
                return repositoryData.Select(item => item.Data).ToList();
            }

            // Fallback: empty data
            return Array.Empty<IReadOnlyDictionary<string, object?>>();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_INTERNAL: Error getting current data for sorting");
            return Array.Empty<IReadOnlyDictionary<string, object?>>();
        }
    }

    /// <summary>
    /// INTERNAL: Apply sorted data back to the grid
    /// </summary>
    private async Task ApplySortedDataAsync(IReadOnlyList<IReadOnlyDictionary<string, object?>> sortedData)
    {
        try
        {
            if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
            {
                // In UI mode, update the ViewModel which will refresh the UI
                await _viewModel.UpdateDataAsync(sortedData);
            }
            else if (_repository != null)
            {
                // In headless mode, update the repository directly
                await _repository.ClearAsync();
                foreach (var item in sortedData)
                {
                    await _repository.AddAsync(new Core.Entities.DataGridItem { Data = item });
                }
            }

            _logger.LogTrace("SORT_INTERNAL: Applied sorted data to grid - {RowCount} rows", sortedData.Count);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_INTERNAL: Error applying sorted data to grid");
        }
    }

    /// <summary>
    /// PRESET: Configure for single-column sorting only
    /// SIMPLE: Disable multi-column complexity
    /// </summary>
    public void UseSingleColumnSort()
    {
        try
        {
            SortConfiguration = SortConfiguration.SingleColumn;
            _logger.LogInformation("SORT_CONFIG: Configured for single-column sorting");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_CONFIG: Failed to configure single-column sorting");
        }
    }

    /// <summary>
    /// PRESET: Configure for case-sensitive string sorting
    /// PRECISION: Exact string matching in sorts
    /// </summary>
    public void UseCaseSensitiveSort()
    {
        try
        {
            SortConfiguration = SortConfiguration.CaseSensitive;
            _logger.LogInformation("SORT_CONFIG: Configured for case-sensitive sorting");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_CONFIG: Failed to configure case-sensitive sorting");
        }
    }

    /// <summary>
    /// INTERNAL: Initialize sort system
    /// </summary>
    private void InitializeSort()
    {
        try
        {
            _sortConfiguration = SortConfiguration.Default;
            _sortEngine = new SortEngine(_logger.CreateScope("SortEngine"), _sortConfiguration);

            _logger.LogInformation("SORT_SYSTEM: Sort engine initialized");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "SORT_SYSTEM: Failed to initialize sort engine");
        }
    }

    #endregion

    #region Performance Optimization API - Large Dataset Support

    private PerformanceOptimizationEngine? _performanceEngine;
    private VirtualizationConfiguration _virtualizationConfiguration;
    private bool _isVirtualizationEnabled = false;

    /// <summary>
    /// ENTERPRISE: Configure virtualization for large datasets (100k-10M rows)
    /// PERFORMANCE: Intelligent paging with memory management
    /// </summary>
    public VirtualizationConfiguration VirtualizationConfiguration
    {
        get => _virtualizationConfiguration;
        set
        {
            _virtualizationConfiguration = value ?? VirtualizationConfiguration.Default;
            if (_performanceEngine != null)
            {
                _performanceEngine.UpdateVirtualizationConfiguration(_virtualizationConfiguration);
            }
            _logger.LogInformation("CONFIG: Virtualization configuration updated - Page size: {PageSize}, Max cached: {MaxPages}",
                _virtualizationConfiguration.PageSize, _virtualizationConfiguration.MaxCachedPages);
        }
    }

    /// <summary>
    /// ENTERPRISE: Enable data virtualization for large datasets
    /// PERFORMANCE: Reduces memory usage and improves UI responsiveness
    /// </summary>
    public async Task EnableVirtualizationAsync()
    {
        try
        {
            _logger.LogInformation("PERFORMANCE_API: Enabling virtualization for large dataset optimization");

            _performanceEngine ??= new PerformanceOptimizationEngine(_logger.CreateScope("PerformanceEngine"), _virtualizationConfiguration);

            var currentData = await GetCurrentDataForVirtualizationAsync();
            if (currentData.Count > 0)
            {
                await _performanceEngine.EnableVirtualizationAsync(currentData);
                _isVirtualizationEnabled = true;

                _logger.LogInformation("PERFORMANCE_API: Virtualization enabled for {RowCount} rows", currentData.Count);

                // Refresh UI to use virtualized data
                if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
                {
                    await _viewModel.RefreshDataAsync();
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_API: Error enabling virtualization");
            throw;
        }
    }

    /// <summary>
    /// ENTERPRISE: Disable data virtualization (return to standard mode)
    /// MEMORY: Loads all data into memory for standard operations
    /// </summary>
    public async Task DisableVirtualizationAsync()
    {
        try
        {
            _logger.LogInformation("PERFORMANCE_API: Disabling virtualization");

            _performanceEngine?.DisableVirtualization();
            _isVirtualizationEnabled = false;

            // Refresh UI to use standard data loading
            if (_operationMode == DataGridOperationMode.UI && _viewModel != null)
            {
                await _viewModel.RefreshDataAsync();
            }

            _logger.LogInformation("PERFORMANCE_API: Virtualization disabled");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_API: Error disabling virtualization");
        }
    }

    /// <summary>
    /// ENTERPRISE: Get virtualized data page for specific range
    /// PERFORMANCE: Efficient page-based data access
    /// </summary>
    public async Task<DataPage> GetVirtualizedPageAsync(int pageIndex)
    {
        try
        {
            if (!_isVirtualizationEnabled || _performanceEngine == null)
            {
                _logger.LogWarning("PERFORMANCE_API: Virtualization not enabled for GetVirtualizedPageAsync");
                return DataPage.Create(pageIndex, 0, 0, Array.Empty<IReadOnlyDictionary<string, object?>>());
            }

            return await _performanceEngine.GetPageAsync(pageIndex);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_API: Error getting virtualized page {PageIndex}", pageIndex);
            return DataPage.Create(pageIndex, 0, 0, Array.Empty<IReadOnlyDictionary<string, object?>>());
        }
    }

    /// <summary>
    /// ENTERPRISE: Get specific rows with virtualization support
    /// CONVENIENCE: Direct row access with automatic page management
    /// </summary>
    public async Task<IReadOnlyList<IReadOnlyDictionary<string, object?>>> GetVirtualizedRowsAsync(int startRow, int count)
    {
        try
        {
            if (!_isVirtualizationEnabled || _performanceEngine == null)
            {
                _logger.LogWarning("PERFORMANCE_API: Virtualization not enabled for GetVirtualizedRowsAsync");

                // Fallback to standard data access
                var allData = await GetCurrentDataForVirtualizationAsync();
                return allData.Skip(startRow).Take(count).ToList();
            }

            return await _performanceEngine.GetRowsAsync(startRow, count);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_API: Error getting virtualized rows from {StartRow}, count: {Count}", startRow, count);
            return Array.Empty<IReadOnlyDictionary<string, object?>>();
        }
    }

    /// <summary>
    /// MONITORING: Get current performance statistics
    /// DIAGNOSTICS: Memory usage, cache efficiency, loading times
    /// </summary>
    public PerformanceStatistics GetPerformanceStatistics()
    {
        try
        {
            if (_performanceEngine == null)
            {
                return PerformanceStatistics.Create(0, 0, 0, 0);
            }

            var stats = _performanceEngine.GetPerformanceStatistics();
            _logger.LogTrace("PERFORMANCE_API: Retrieved performance statistics - Memory: {MemoryMB:F1}MB, Cache hit ratio: {CacheRatio}%",
                stats.MemoryUsageMB, stats.CacheHitRatio);

            return stats;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_API: Error getting performance statistics");
            return PerformanceStatistics.Create(0, 0, 0, 0);
        }
    }

    /// <summary>
    /// QUERY: Check if virtualization is currently enabled
    /// INTEGRATION: For conditional logic in UI and operations
    /// </summary>
    public bool IsVirtualizationEnabled => _isVirtualizationEnabled;

    /// <summary>
    /// PRESET: Configure for large datasets (1M+ rows)
    /// OPTIMIZATION: Optimized settings for large data processing
    /// </summary>
    public async Task OptimizeForLargeDatasetAsync()
    {
        try
        {
            VirtualizationConfiguration = VirtualizationConfiguration.LargeDataset;
            await EnableVirtualizationAsync();
            _logger.LogInformation("PERFORMANCE_CONFIG: Optimized for large dataset (1M+ rows)");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_CONFIG: Failed to optimize for large dataset");
        }
    }

    /// <summary>
    /// PRESET: Configure for massive datasets (10M+ rows)
    /// OPTIMIZATION: Maximum performance settings for huge data
    /// </summary>
    public async Task OptimizeForMassiveDatasetAsync()
    {
        try
        {
            VirtualizationConfiguration = VirtualizationConfiguration.MassiveDataset;
            await EnableVirtualizationAsync();
            _logger.LogInformation("PERFORMANCE_CONFIG: Optimized for massive dataset (10M+ rows)");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_CONFIG: Failed to optimize for massive dataset");
        }
    }

    /// <summary>
    /// PRESET: Configure for memory-efficient operation
    /// OPTIMIZATION: Reduced memory usage for limited RAM scenarios
    /// </summary>
    public async Task OptimizeForMemoryEfficiencyAsync()
    {
        try
        {
            VirtualizationConfiguration = VirtualizationConfiguration.MemoryEfficient;
            await EnableVirtualizationAsync();
            _logger.LogInformation("PERFORMANCE_CONFIG: Optimized for memory efficiency");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_CONFIG: Failed to optimize for memory efficiency");
        }
    }

    /// <summary>
    /// BATCH PROCESSING: Process large dataset with progress reporting
    /// ENTERPRISE: Efficient processing of massive data with cancellation support
    /// </summary>
    public async Task ProcessLargeDatasetAsync<T>(
        IReadOnlyList<IReadOnlyDictionary<string, object?>> dataset,
        Func<IReadOnlyDictionary<string, object?>, Task<T>> processor,
        IProgress<LargeDataProgress>? progress = null,
        CancellationToken cancellationToken = default)
    {
        try
        {
            _logger.LogInformation("PERFORMANCE_API: Starting large dataset processing - {RowCount} rows", dataset.Count);

            var startTime = DateTime.UtcNow;
            var batchSize = _virtualizationConfiguration.PageSize;
            var processedRows = 0L;

            for (int i = 0; i < dataset.Count; i += batchSize)
            {
                cancellationToken.ThrowIfCancellationRequested();

                var batch = dataset.Skip(i).Take(batchSize);
                var batchTasks = batch.Select(processor);

                await Task.WhenAll(batchTasks);

                processedRows += batchTasks.Count();
                var elapsed = DateTime.UtcNow - startTime;

                // Report progress
                if (progress != null)
                {
                    var progressInfo = LargeDataProgress.Create(processedRows, dataset.Count, elapsed, "Processing batch");
                    progress.Report(progressInfo);
                }

                _logger.LogTrace("PERFORMANCE_BATCH: Processed {ProcessedRows}/{TotalRows} rows", processedRows, dataset.Count);
            }

            var totalTime = DateTime.UtcNow - startTime;
            _logger.LogInformation("PERFORMANCE_API: Large dataset processing completed - {RowCount} rows in {Time}ms",
                dataset.Count, totalTime.TotalMilliseconds);
        }
        catch (OperationCanceledException)
        {
            _logger.LogInformation("PERFORMANCE_API: Large dataset processing cancelled");
            throw;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_API: Error during large dataset processing");
            throw;
        }
    }

    /// <summary>
    /// INTERNAL: Get current data for virtualization operations
    /// </summary>
    private async Task<IReadOnlyList<IReadOnlyDictionary<string, object?>>> GetCurrentDataForVirtualizationAsync()
    {
        try
        {
            if (_repository?.GetAllAsync != null)
            {
                var repositoryData = await _repository.GetAllAsync();
                return repositoryData.Select(item => item.Data).ToList();
            }

            // Fallback: empty data
            return Array.Empty<IReadOnlyDictionary<string, object?>>();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_INTERNAL: Error getting current data for virtualization");
            return Array.Empty<IReadOnlyDictionary<string, object?>>();
        }
    }

    /// <summary>
    /// INTERNAL: Initialize performance optimization
    /// </summary>
    private void InitializePerformanceOptimization()
    {
        try
        {
            _virtualizationConfiguration = VirtualizationConfiguration.Default;
            _performanceEngine = new PerformanceOptimizationEngine(_logger.CreateScope("PerformanceEngine"), _virtualizationConfiguration);

            _logger.LogInformation("PERFORMANCE_SYSTEM: Performance optimization engine initialized");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "PERFORMANCE_SYSTEM: Failed to initialize performance optimization engine");
        }
    }

    #endregion

    #region Global Error Handling

    /// <summary>
    /// ENTERPRISE: Global unhandled exception handler for the component
    /// </summary>
    static AdvancedDataGrid()
    {
        // Register global error handlers
        AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;
        TaskScheduler.UnobservedTaskException += OnUnobservedTaskException;
    }

    private static void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
    {
        var logger = new DataGridLogger(null, "GlobalErrorHandler");
        logger.LogError(e.ExceptionObject as Exception ?? new Exception("Unknown unhandled exception"),
            "GLOBAL ERROR: Unhandled exception in AdvancedDataGrid - IsTerminating: {IsTerminating}", e.IsTerminating);
    }

    private static void OnUnobservedTaskException(object? sender, UnobservedTaskExceptionEventArgs e)
    {
        var logger = new DataGridLogger(null, "GlobalErrorHandler");
        logger.LogError(e.Exception, "GLOBAL ERROR: Unobserved task exception in AdvancedDataGrid");
        e.SetObserved(); // Prevent application crash
    }

    #endregion

    #region IDisposable

    public void Dispose()
    {
        if (_disposed) return;

        try
        {
            _logger.LogInformation("DISPOSAL: Starting AdvancedDataGrid disposal");

            // Dispose UI components first
            _uiControl?.Dispose();
            _viewModel?.Dispose();

            // Dispose engines and services in reverse order of initialization
            _autoRowHeightEngine?.Dispose();
            _keyboardEngine?.Dispose();
            _copyPasteEngine?.Dispose();
            _searchFilterEngine?.Dispose();
            _sortEngine?.Dispose();
            _performanceEngine?.Dispose();
            _validationService?.Dispose();
            _repository?.Dispose();

            _logger.LogInformation("DISPOSAL: AdvancedDataGrid disposed successfully");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "DISPOSAL: Error during AdvancedDataGrid disposal");
        }
        finally
        {
            _logger?.Dispose();
            _disposed = true;
        }
    }

    #endregion
}

#region Value Objects and Configuration Types

/// <summary>
/// CONFIGURATION: Comprehensive color configuration for grid theming
/// NO HARDCODED COLORS: All colors are configurable with sensible defaults
/// </summary>
public sealed record ColorConfiguration
{
    // Grid Background Colors
    public Color GridBackgroundColor { get; init; } = Colors.White;
    public Color GridBorderColor { get; init; } = Colors.LightGray;

    // Header Colors
    public Color HeaderBackgroundColor { get; init; } = Colors.WhiteSmoke;
    public Color HeaderBorderColor { get; init; } = Colors.Silver;
    public Color HeaderForegroundColor { get; init; } = Colors.Black;

    // Cell State Colors
    public Color CellSelectedBackgroundColor { get; init; } = Colors.LightBlue;
    public Color CellSelectedBorderColor { get; init; } = Colors.Blue;
    public Color CellEditingBackgroundColor { get; init; } = Colors.LightYellow;
    public Color CellErrorBackgroundColor { get; init; } = Colors.MistyRose;
    public Color CellErrorBorderColor { get; init; } = Colors.Red;

    // Validation Colors
    public Color ValidationErrorTextColor { get; init; } = Colors.Red;
    public Color ValidationWarningTextColor { get; init; } = Colors.Orange;
    public Color ValidationInfoTextColor { get; init; } = Colors.Blue;

    // Special Column Colors
    public Color DeleteButtonBackgroundColor { get; init; } = Colors.MistyRose;
    public Color DeleteButtonForegroundColor { get; init; } = Colors.DarkRed;
    public Color CheckBoxBorderColor { get; init; } = Colors.Gray;

    /// <summary>Create default color configuration</summary>
    public static ColorConfiguration CreateDefault() => new();

    /// <summary>Create dark theme configuration</summary>
    public static ColorConfiguration CreateDarkTheme() => new()
    {
        GridBackgroundColor = Colors.Black,
        HeaderBackgroundColor = Colors.DarkGray,
        HeaderForegroundColor = Colors.White,
        CellSelectedBackgroundColor = Colors.DarkBlue,
        ValidationErrorTextColor = Colors.LightCoral
    };
}

#endregion

